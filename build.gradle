plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	
	implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	implementation 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.boot:spring-boot-starter-security'//JwtFilter를 위해 추가
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'io.github.cdimascio:dotenv-java:2.3.0'
	implementation 'javax.xml.bind:jaxb-api:2.3.1' // Jwts.builder().signWith(...) 사용 시 내부적으로 DatatypeConverter가 호출될 수 있기 때문에 필요함.
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.1' // Jwts.builder().signWith(...) 사용 시 내부적으로 DatatypeConverter가 호출될 수 있기 때문에 필요함.

	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
}
//./gradlew clean build 명령어로 리빌드할 수 있다.

tasks.named('test') {
	useJUnitPlatform()
}
